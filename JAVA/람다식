궁금한 내용
- 스트림 처리 구조


참조 문건
https://taegyunwoo.github.io/java/Java_Lambda
  - ~ 표준 API 이전 내용 참고
https://github.com/cheese10yun/TIL/blob/master/JAVA/%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EA%B8%B0%EC%B4%88.md
  - 표준 API 구체적 설명
  - 스트림 구조 상세 설명!

사실 람다식은 익명 클래스 객체와 동등
- 함수형 인터페이스 타입 변수 -> 해당 인터페이스를 구현한 익명 클래스 

인터페이스와 함수형 인터페이스의 차이점?
- https://esoongan.tistory.com/176
오로지 추상형 메서드 하나만을 가지는 인터페이스


최종 스트림의 집계 기능이 시작되기 전까지 중간 처리는 지연(Lazy)된다.
최종 스트림이 시작하면 비로서 컬럭센에서 요소가 하나씩 중간 스트림에서 처리되고 최종 스트림까지 오게된다.
-> 최종스트림 시작 전까지는 각 큐에 해당 중간 처리 기능이 대기상태로 머문다?
...> 스트림이 모두 병렬처리되진 않는다, parrelStream을 처리해야 병렬처리가 된다.
--> 스트림,stream()은 순차처리 스트림인가?(O?)


데이터 처리의 병렬화가 정확히 어떤 식으로 흘러가는지 감이 안 잡힌다.


데이터를 언제 계산하느냐가 컬렉션과 스트림의 가장 큰 차이라고 할 수 있다. 
컬렉션은 현재 자료구조가 포함된 모든 값을 메모리에 저장하는 자료구조이다. 
즉, 컬렉션의 모든 요소를 컬렉션에 추가하기전에 계산되어야한다. (컬렉션에 요소를 추가하거나 컬렉션의 요소를 삭제할 수 있다. 이런 연산을 수행할 때마다 컬렉션의 모든 요소를 메모리에 저장해야 하며 컬렉션에 추가하려는 요소는 미리 계산되어야한다.)
반면 스트림은 이론적으로 요청할 때만 요소를 계산하는 고정된 자료구조이다.(스트림에서 요소를 추가하거나, 요소를 제거할 수 없다.) 이러한 스트림의 특성은 프로그래밍에 큰 도움을 준다.


'''중간연산을 합친 다음에 합쳐진 중간 연산을 최종 연산으로 한 번에 처리하기 때문이다.''' 무슨 의미인지 알다가도 모르겠다.
flatMap 메서드는 스트림이나 각 값을 다른 스트림으로 만든 다음에 모든 스트림을 하나의 스트림으로 연결하는 기능을 수행한다. 뭐더러 하는 지 잘 모르겠다.
