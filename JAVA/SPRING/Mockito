springframework mock test
  given-when-then 구조

Mockito
단위 테스트를 위해 모의 객체를 생성하고 관리하는 데 사용되는 Java 오픈소스 프레임워크
실제 객체의 동작을 모방하는 모의 객체(Mock Object)를 생성하여 코드의 ‘특정 부분을 격리’시키고 테스트하기 쉽게 만들어줌
단일 컴포넌트의 동작을 테스트하는 데 사용
클래스 내의 개별 메서드나 함수, 서로 다른 클래스 또는 컴포넌트 간의 상호작용, 객체들 간의 협업 등을 테스트

모의 객체(Mock Object)
- 실제 사용되는 객체 생성을 대체하기 위해 테스트에 사용되는 객체를 의미
- 모의 객체의 변수 값은 null, 0, false와 같은 기본 타입의 값이 반환되며 메서드는 기본적으로 null을 구성

Mockito를 사용하여 ‘모의 객체’와 함께 서비스를 호출하여 ‘비즈니스 로직이 올바르게 처리’가 되는지 확인
서비스의 비즈니스 로직에 대해 검증하고 예외 상황에 대해 처리를 확인



JUnit5 흐름에서는 매번 데이터 조회를 해오기 위해 ‘로컬 서버’를 실행시켜 테스트를 수행하는 데에 불편함이 발생하고 이를 대처하여 Mockito를 사용
-> JUnit5만을 이용하였던 방식과 다르게 직접적인 DB 호출을 수행하지 않고 Mock Object라는 모의 객체를 구성하여서 테스트를 진행하는 방식

Mockito 수행과정
- 모의 객체 생성(Mock) → 메서드 호출 예상 동작 설정(Stub) → 메서드 호출 검증(Verify)
Mock으로 모의 객체를 생성하고 Stub로 예상 동작을 정의하며 verfiy를 통해 검증을 수행

Mock		                  실제 객체를 대신하여 프로그래밍을 테스트할 수 있는 모의 객체를 생성하는 것으로 특정 동작이나 결과를 설정하고 검증하기 위해 사용됩니다.
Stub		                  특정 메서드 호출에 대해 미리 정의된 동작을 반환하는 객체로, 테스트에서 사용될 때 실제 동작이 아닌 가짜 동작을 수행합니다.
// Mock 객체 생성
List<String> mockList = Mockito.mock(List.class);
// Mock 객체의 동작 정의 : Stub - Mock 객체의 사이즈를 항상 10으로 반환하도록 예상동작을 설정합니다.
Mockito.when(mockList.size()).thenReturn(10);
// Mock 객체의 메소드 호출
int size = mockList.size();
// 결과 확인
assertEquals(10, size);

Spy		                    실제 객체를 사용하면서 해당 객체의 일부 동작을 감시하고 기록할 수 있는 객체
// 실제 객체 생성
List<String> originalList = new ArrayList<>();
// Spy 객체 생성 : Spy - 실제 객체의 원본을 유지하며 객체를 생성합니다.
List<String> spyList = Mockito.spy(originalList);
// Spy 객체의 메서드 동작 정의 : Spy - 이러한 객체에 값을 지정합니다.
Mockito.doReturn("Mocked").when(spyList).get(0);
// Spy 객체 사용
String element = spyList.get(0); // "Mocked"를 반환

Mocking		                특정 동작이나 결과를 시뮬레이션하기 위해 모의 객체를 생성하거나 가짜 동작을 정의하는 것을 말합니다.


Verification		          메서드 호출이나 객체 동작이 예상대로 수행되었는지 확인하는 작업입니다.
Matchers	                메서드	모킹이나 확인 작업에서 사용되는 매개변수 일치 여부를 확인하는 데 사용되는 메서드를 제공합니다.
MockitoAnnotations	      클래스	Mockito 애너테이션을 사용하여 Mock 및 Spy 객체를 초기화하는 데 사용되는 클래스입니다.
MockitoJUnitRunner	      클래스	JUnit 테스트에 Mockito를 사용하는 데 필요한 설정을 자동으로 처리하는 러너 클래스입니다.
MockitoJUnitRunner.Silent	클래스	MockitoJUnitRunner와 유사하지만, Mock 객체를 생성하지 않은 클래스에서도 실행할 수 있습니다.



 @InjectMocks, @Mock, @MockBean 차이점
- @InjectMocks, @Mock는 Mockito에서 ‘유닛 테스트’에 사용되고 @MockBean는 Spring Boot에서 ‘통합 테스트’에서 사용이 됩니다.
@Mock는 특정 클래스나 인터페이스에 대해 ‘모의 객체를 생성’하는 역할을 수행합니다.
- @InjectMocks는 테스트 대상 객체에 ‘모의 객체를 주입’하는 역할을 수행




Given-When-Then 패턴
// Given
Mockito.when(mockObject.someMethod()).thenReturn(expectedValue);

// When
Object result = testedObject.testedMethod();

// Then
assertEquals(expectedValue, result);
Mockito.verify(mockObject).someMethod();



@ExtendWith(MockitoExtension.class)	JUnit 5	- Mockito를 사용하여 테스트 클래스를 초기화하는 데 사용됩니다.
- MockitoExtension은 JUnit 5의 확장 기능으로, Mockito의 기능을 테스트 클래스에 적용합니다.
MockitoAnnotations.initMocks(this)	JUnit 4	- Mockito를 사용하여 Mock 객체를 초기화하는 데 사용됩니다. 해당 메서드는 deprecated 되었습니다.
-initMocks() 메서드는 목 객체를 주입하고 테스트 클래스의 필드에 할당합니다. 이 방법은 JUnit 4에서 사용됩니다.
MockitoAnnotations.openMocks(this)	JUnit 5	- Mockito 3.4.0 버전부터 도입된 새로운 초기화 방식입니다.
- openMocks() 메서드는 목 객체를 주입하고 테스트 클래스의 필드에 할당합니다. 이 방법은 JUnit 5와 함께 사용됩니다.



@ExtendWith(MockitoExtension.class)
class CodeServiceTest {

    @Mock
    private SqlSession sqlSession;

    @Mock
    private CodeMapper codeMapper;

    @InjectMocks
    private CodeServiceImpl codeService;

    @BeforeEach
    void setUp() {
        //
    }

    @Test
    @DisplayName("객체 값을 기반으로 여러개의 코드 값들을 조회합니다.")
    void selectCodeList() {

        // *************** given : 사전 조건 ******************
        // 1. 가상의 객체를 구성합니다.
        CodeDto mockCodeDto = CodeDto.builder().cd("java").build();

        // 2. Service와 비교할 반환값을 구성합니다.
        List<CodeDto> expectedCodeList = new ArrayList<>();

        // *************** when : 동작 검증 ******************
        // 3. 가상의 codeMapper의 메서드를 호출하여 가상의 객체로 반환되도록 지정합니다.
        Mockito.when(codeMapper.selectCodeList(mockCodeDto)).thenReturn(expectedCodeList);

        // 4. 가상의 sqlSession에 Mapper를 지정해줍니다. (* 해당 부분은 서비스 구현체(ServiceImpl)에서 사용되는 데이터를 구성하였습니다)
        Mockito.when(sqlSession.getMapper(CodeMapper.class)).thenReturn(codeMapper);

        // 5. 테스트 대상 메서드를 호출합니다.
        List<CodeDto> actualCodeList = codeService.selectCodeList(mockCodeDto);

        // *************** when : 결과 검증 ******************
        // 6. 반환된 코드 리스트가 예상한 값과 일치하는지 검증합니다.
        Assertions.assertEquals(expectedCodeList, actualCodeList);
    }
}
