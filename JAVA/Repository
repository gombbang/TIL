
**JPQL select 할 때 from의 대상은 테이블이 아닌 entity다.**

getId가 null이 아니면,
	em.merge?
select 여러 개는 query 생성이 필요하다.
	em.createQuery("SQL문", Item.class).getResultList();
동적쿼리 처리방법 1
	List<  > findAll (TSearch tSearch) {
		em.createQuery(")
	}
	JPQL join 방법
		select o from Order o
		**join o.member m**
		**where m.name like :name**
		, Order.class)
		.setParameter("name", tSearch.getMemberName())
		.setMaxResults(limit);
	set Parameter의 값들은 동적으로 생기고 사라져야한다.
	1) jpql sql문 string 값을 조건에 맞게 동적으로 변경시켜 where 생성 및 where 조건을 추가하게끔 한다.
	2) set paramter를 각 조건에 부합할 때마다 추가해준다.
	하나라도 놓치는 순간 대환장 버그 파티
동적쿼리 처리방법 2
	JPA 표준 스펙, criteria
동적쿼리 처리방법 3. QueryDSL

public List< > findAll(OrderSearch orderSearch) { 
	QOrder order = QOrder.order;
	QMember member = QMember.member;
	
		query.select(order)
			.from(order)
			.join(order.member, member)
			.where(statusEq(orderSearch.getOrderStatus()))
			, nameLike(orderSearch.getMemberName())
			.limit(1000)
			.fetch();
}
	private BooleanExpression statusEq(OrderStatus statusCond) {
		if(statusCond == null) {
			return null;
		}
		return order.status.eq(statusCond);
	}
		private BooleanExpression nameLike(String nameCond) {
		if(!StringUtils.hasText(nameCond)) {
			return null;
		}
		return member.name.like(nameCond);
	}

---

변경감지와 merge

준영속엔티티
	DB에 한번 다녀왔고 JPA가 관리하지 않음.
	영속상태 엔티티는 변경감지가 일어난다, 변경을 JPA가 감시.
	commit 시점에 바꿔치기를 함.
	내가 직접 new로 해서 만든 데이터는 관리하지 않음.
	  1) 변경감지 (dirty checking)
	     repo.findOne으로 가져온 값을 사용해서 변경한다.
	  2) getId != null일 때의 save값으로 처리
		merge 사용!
		영속성 컨텍스트에서 같은 식별자를 찾고
		같은 파라미터로 넘어온 merge 인자로 바꿔치기한다.
		이후에 트랜잭션 커밋될 때 반영되는 것.
		merge에 인자로 넘어간 데이터는 영속성 컨텍스트에 없다.
		merge의 result로 나온 데이터가 영속성 컨텍스트에서 관리된다.

merge위험성
	전달한 값 그대로 모두 바뀌기 때문에
	값을 set하지 않으면 null값으로 변경되어버린다.
	null로까지 엎어버린다.
때문에 merge가 아닌 변경감지를 해야한다.

등록 필드가 10개인데
수정 필드가 5개인 경우, 제한이 생기고
나머지 5개 필드에 대해 null이 되는 위험성이 발생하기 때문에
merge보다 변경감지로 처리하는게 좋다.

단순한 경우가 아니면 모두 위험하다.
사내 개발에서는 사용하지 말아야 할 행동.

update는 set으로 처리하기보다는 의미있는 메서드를 활용하는 게 좋다.
변경지점이 모두 entity로 해두어야 다른 사람들이 이해하기 쉽다.

데이터의 변경지점은 setter 대신 entity에 의미있는 메서드르 만들어 해당 메서드를 활용해야 다른 사람들이 변경지점을 확인하기 편하다.

API를 통해 UI에서 전달받은 dto를 직접 repository 메서드로 전달한다.

