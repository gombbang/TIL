# 30일 자료구조 및 알고리즘 학습 계획

## 개요
이 계획은 **30일** 동안 **자료구조**와 **알고리즘**을 기초부터 실전 활용까지 학습하기 위한 계획입니다. 각 주차마다 핵심 목표를 설정하고, 이론 학습과 실습을 균형 있게 배치하여, 자료구조와 알고리즘을 **체계적이고 실용적으로 익힐 수 있도록** 구성

---

## 1주차: 자료구조 기초 및 기본 개념 습득

### 목표:
- 자료구조의 기본 개념과 중요성을 이해하고, 주요 자료구조(배열, 연결 리스트, 스택, 큐)에 대한 실습과 이론을 확실히 익힘
- 알고리즘 복잡도(Big-O)와 시간/공간 분석 개념을 이해

### 일별 학습 일정:
#### **Day 1:**
- **이론:** 자료구조 개요 및 배열(Array) 개념
  - 배열의 기본 개념, 메모리 구조, 시간 복잡도 분석
- **실습:** 배열 삽입, 삭제, 탐색 연산 구현

#### **Day 2:**
- **이론:** 연결 리스트(Linked List) 기본 개념
  - 단일 연결 리스트와 이중 연결 리스트의 차이점
- **실습:** 단일 연결 리스트 구현(삽입, 삭제, 탐색)

#### **Day 3:**
- **이론:** 스택(Stack)과 큐(Queue) 개념
  - 스택의 푸시(push), 팝(pop), 큐의 인큐(enqueue), 디큐(dequeue)
- **실습:** 스택과 큐 구현

#### **Day 4:**
- **복습:** Day 1~3 개념 복습 및 실습 코드 점검
- **테스트:** 배열, 연결 리스트, 스택, 큐 관련 문제 풀기

#### **Day 5:**
- **이론:** 알고리즘 복잡도 및 Big-O 표기법
  - 시간 복잡도 O(1), O(n), O(log n) 분석
- **실습:** 각 자료구조의 시간 복잡도 분석 연습

#### **Day 6:**
- **이론:** 이진 트리(Binary Tree) 기본 개념
  - 트리의 기본 구조, 이진 탐색 트리(BST)
- **실습:** 이진 트리 삽입, 삭제, 탐색 구현

#### **Day 7:**
- **복습:** Day 1~6 복습
- **실습:** 트리 관련 문제 풀기
- **점검:** 스스로 자료구조 기본 개념 및 구현 가능 여부 점검

---

## 2주차: 중급 자료구조 및 알고리즘

### 목표:
- 고급 자료구조(힙, 해시 테이블, 그래프) 및 알고리즘(DFS, BFS, 다익스트라) 학습
- 자료구조를 실전에서 어떻게 활용할 수 있는지 경험

### 일별 학습 일정:
#### **Day 8:**
- **이론:** 힙(Heap) 개념
  - 최대 힙, 최소 힙, 우선순위 큐
- **실습:** 힙 삽입, 삭제 연산 구현

#### **Day 9:**
- **이론:** 해시 테이블(Hash Table) 개념
  - 해시 함수, 충돌 해결 방법 (체이닝, 오픈 어드레싱)
- **실습:** 해시 테이블 구현

#### **Day 10:**
- **이론:** 그래프(Graph) 기본 개념 및 탐색 알고리즘(DFS, BFS)
  - 그래프 표현 방법 (인접 행렬, 인접 리스트)
- **실습:** DFS, BFS 구현

#### **Day 11:**
- **이론:** 다익스트라(Dijkstra) 알고리즘
  - 최단 경로 알고리즘 개요 및 구현
- **실습:** 다익스트라 알고리즘 구현

#### **Day 12:**
- **복습:** Day 8~11 복습 및 실습 문제 풀기
- **문제 풀이:** LeetCode나 HackerRank에서 자료구조 및 알고리즘 관련 문제 풀기

#### **Day 13:**
- **이론:** 동적 계획법(DP) 기본 개념
  - DP 기법(탑다운, 바텀업)
- **실습:** 간단한 DP 문제 풀기 (예: Fibonacci, Knapsack)

#### **Day 14:**
- **프로젝트:** 개인 프로젝트 (자료구조와 알고리즘을 활용한 문제 풀기)
  - 예시 프로젝트: 미니 검색 엔진, 우선순위 큐를 활용한 일정 관리 시스템
- **점검:** 프로젝트 결과물 점검, 코드 최적화 및 피드백

---

## 3주차: 알고리즘 최적화 및 심화

### 목표:
- 알고리즘 최적화 및 다양한 고급 알고리즘을 학습하고, 실전 문제 해결 능력을 강화
- 시간 복잡도를 고려한 알고리즘 설계 및 분석 능력 배양

### 일별 학습 일정:
#### **Day 15:**
- **이론:** 분할 정복(Divide and Conquer) 알고리즘
  - 예시: 병합 정렬(Merge Sort), 퀵 정렬(Quick Sort)
- **실습:** 병합 정렬 및 퀵 정렬 구현

#### **Day 16:**
- **이론:** 그리디 알고리즘
  - 예시: 동전 교환 문제, 활동 선택 문제
- **실습:** 그리디 알고리즘 문제 풀이

#### **Day 17:**
- **이론:** 백트래킹(Backtracking) 알고리즘
  - 예시: N-Queens 문제, 순열 생성
- **실습:** 백트래킹 문제 풀이

#### **Day 18:**
- **이론:** DP 고급 기법
  - 예시: 부분 집합 합 문제, 최장 공통 부분 수열(LCS)
- **실습:** DP 고급 문제 풀이

#### **Day 19:**
- **복습:** Day 15~18 복습
- **문제 풀이:** 복잡한 알고리즘 문제 풀이

#### **Day 20:**
- **이론:** 이진 탐색 및 이진 탐색 트리(BST) 심화
  - 예시: 이진 탐색 트리에서의 삽입, 삭제, 탐색
- **실습:** 이진 탐색 트리 구현 및 최적화

#### **Day 21:**
- **프로젝트:** 알고리즘 최적화 프로젝트
  - 예시 프로젝트: 최단 경로 찾기, 큰 데이터 세트 처리
- **점검:** 프로젝트 결과물 점검 및 최적화

---

## 4주차: 실전 문제 해결 및 최종 프로젝트

### 목표:
- 실제 문제 해결을 위한 종합적인 알고리즘 활용
- 최종 프로젝트를 통해 실전 경험을 쌓고, 면접 준비

### 일별 학습 일정:
#### **Day 22:**
- **이론:** 알고리즘 설계 전략
  - 분할 정복, 그리디, 백트래킹, 동적 계획법을 활용한 문제 해결
- **실습:** 문제 해결 전략 세우기

#### **Day 23:**
- **이론:** 고급 그래프 알고리즘
  - 예시: 플로이드-워셜, 벨만-포드 알고리즘
- **실습:** 고급 그래프 문제 풀이

#### **Day 24:**
- **이론:** 최소 스패닝 트리(MST) 알고리즘
  - 예시: 크루스칼 알고리즘, 프림 알고리즘
- **실습:** MST 알고리즘 문제 풀이

#### **Day 25:**
- **프로젝트:** 종합적인 문제 해결 프로젝트
  - 예시: 큰 데이터를 처리할 수 있는 효율적인 알고리즘 설계
- **실습:** 종합 프로젝트 실습

#### **Day 26:**
- **복습:** 전체 복습 및 최종 점검
- **문제 풀이:** 다양한 알고리즘 문제 풀이

#### **Day 27-28:**
- **프로젝트:** 최종 프로젝트
  - 예시: 알고리즘을 활용한 웹 애플리케이션 또는 API 구현

#### **Day 29:**
- **테스트:** 최종 프로젝트 테스트 및 최적화
  - 시간 복잡도 및 성능 최적화

#### **Day 30:**
- **점검:** 프로젝트 완성도 점검, 최종 리뷰
  - **자기 점검:** 알고리즘 문제 해결 능력 점검
  - **최종 피드백:** 프로젝트 코드 리뷰 및 개선점 도출

---

## 핵심 학습 내용 요약:
- **1주차**: 배열, 연결 리스트, 스택, 큐, 트리 등 기초 자료구조와 알고리즘 복잡도(Big-O) 분석
- **2주차**: 힙, 해시 테이블, 그래프, 다익스트라 알고리즘 등 고급 자료구조 및 알고리즘 학습
- **3주차**: 분할 정복, 그리디 알고리즘, 백트래킹, 동적 계획법(DP) 심화
- **4주차**: 알고리즘 설계 전략과 실전 문제 해결, 최종 프로젝트 완성

---

## 실전 활용:
### 실전 과제:
- **문제 풀이**: LeetCode, HackerRank에서 고급 문제를 풀며 실전 경험을 쌓기
- **개인 프로젝트**: 실제 문제 해결을 위한 프로젝트(예: 알고리즘 최적화 프로젝트, 효율적인 검색 시스템 등)

---

## 점검 체크리스트 (자기평가용)
- **배운 자료구조와 알고리즘에 대한 이해도**: 모든 자료구조 및 알고리즘을 이해하고 구현할 수 있는지 점검
- **문제 해결 능력**: 알고리즘을 실제 문제에 어떻게 적용할 수 있는지 점검
- **프로젝트 완성도**: 최종 프로젝트 결과물의 성능과 구현을 점검

---

## 유의사항:
1. **시간 관리**: 일정한 시간 내에 핵심 개념을 익히는 것이 중요합니다. 이론과 실습을 적절히 배분하여 학습
2. **복습**: 매일 복습하는 시간을 확보하여 **개념을 장기 기억**으로 만드는 것이 중요
3. **실습**: 이론을 배운 후, **실습을 통해 문제를 해결하는 경험**을 쌓는 것이 핵심
4. **문제 해결 전략**: 다양한 알고리즘 설계 기법을 사용하여 실전에서 **문제 해결 능력**을 키우기.

