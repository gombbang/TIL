# 2주 자료구조 및 알고리즘 학습 계획

## 개요
이 계획은 2주 동안 **자료구조**와 **알고리즘**을 기초부터 실전 활용까지 집중적으로 학습하기 위한 계획입니다. 각 주차마다 핵심 개념을 다루고, 실습과 문제 풀이를 통해 실전 능력을 키울 수 있도록 구성되었습니다.

---

## 1주차: 자료구조 기초 및 기본 개념 습득

### 목표:
- 자료구조의 기본 개념과 중요성을 이해하고, 주요 자료구조(배열, 연결 리스트, 스택, 큐, 트리)에 대한 실습과 이론을 확실히 익힘
- 알고리즘 복잡도(Big-O)와 시간/공간 분석 개념을 이해

### 일별 학습 일정:
#### **Day 1:**
- **이론:** 자료구조 개요 및 배열(Array) 개념
  - 배열의 기본 개념, 메모리 구조, 시간 복잡도 분석
- **실습:** 배열 삽입, 삭제, 탐색 연산 구현

#### **Day 2:**
- **이론:** 연결 리스트(Linked List) 기본 개념
  - 단일 연결 리스트와 이중 연결 리스트의 차이점
- **실습:** 단일 연결 리스트 구현(삽입, 삭제, 탐색)

#### **Day 3:**
- **이론:** 스택(Stack)과 큐(Queue) 개념
  - 스택의 푸시(push), 팝(pop), 큐의 인큐(enqueue), 디큐(dequeue)
- **실습:** 스택과 큐 구현

#### **Day 4:**
- **복습:** Day 1~3 개념 복습 및 실습 코드 점검
- **테스트:** 배열, 연결 리스트, 스택, 큐 관련 문제 풀기

#### **Day 5:**
- **이론:** 알고리즘 복잡도 및 Big-O 표기법
  - 시간 복잡도 O(1), O(n), O(log n) 분석
- **실습:** 각 자료구조의 시간 복잡도 분석 연습

#### **Day 6:**
- **이론:** 이진 트리(Binary Tree) 기본 개념
  - 트리의 기본 구조, 이진 탐색 트리(BST)
- **실습:** 이진 트리 삽입, 삭제, 탐색 구현

#### **Day 7:**
- **복습:** Day 1~6 복습
- **실습:** 트리 관련 문제 풀기
- **점검:** 스스로 자료구조 기본 개념 및 구현 가능 여부 점검

---

## 2주차: 중급 자료구조 및 알고리즘

### 목표:
- 고급 자료구조(힙, 해시 테이블, 그래프) 및 알고리즘(DFS, BFS, 다익스트라) 학습
- 자료구조를 실전에서 어떻게 활용할 수 있는지 경험

### 일별 학습 일정:
#### **Day 8:**
- **이론:** 힙(Heap) 개념
  - 최대 힙, 최소 힙, 우선순위 큐
- **실습:** 힙 삽입, 삭제 연산 구현

#### **Day 9:**
- **이론:** 해시 테이블(Hash Table) 개념
  - 해시 함수, 충돌 해결 방법 (체이닝, 오픈 어드레싱)
- **실습:** 해시 테이블 구현

#### **Day 10:**
- **이론:** 그래프(Graph) 기본 개념 및 탐색 알고리즘(DFS, BFS)
  - 그래프 표현 방법 (인접 행렬, 인접 리스트)
- **실습:** DFS, BFS 구현

#### **Day 11:**
- **이론:** 다익스트라(Dijkstra) 알고리즘
  - 최단 경로 알고리즘 개요 및 구현
- **실습:** 다익스트라 알고리즘 구현

#### **Day 12:**
- **복습:** Day 8~11 복습 및 실습 문제 풀기
- **문제 풀이:** LeetCode나 HackerRank에서 자료구조 및 알고리즘 관련 문제 풀기

#### **Day 13:**
- **이론:** 동적 계획법(DP) 기본 개념
  - DP 기법(탑다운, 바텀업)
- **실습:** 간단한 DP 문제 풀기 (예: Fibonacci, Knapsack)

#### **Day 14:**
- **프로젝트:** 개인 프로젝트 (자료구조와 알고리즘을 활용한 문제 풀기)
  - 예시 프로젝트: 미니 검색 엔진, 우선순위 큐를 활용한 일정 관리 시스템
- **점검:** 프로젝트 결과물 점검, 코드 최적화 및 피드백

---

## 핵심 학습 내용 요약:
- **1주차**: 배열, 연결 리스트, 스택, 큐와 트리의 기본 개념과 구현. 알고리즘 복잡도(Big-O) 분석을 통해 자료구조의 효율성을 이해.
- **2주차**: 힙, 해시 테이블, 그래프, 다익스트라 알고리즘 등 고급 자료구조 및 알고리즘 학습. 동적 계획법(DP)을 활용한 문제 해결 연습.

---

## 실전 활용:
### 실전 과제:
- **문제 풀이**: LeetCode, HackerRank에서 중급 이상의 문제를 풀어보세요. 실전에서 자료구조를 어떻게 활용할 수 있는지 경험을 쌓을 수 있습니다.
- **개인 프로젝트**: 자료구조를 활용한 프로젝트를 진행해보세요. 예를 들어, 우선순위 큐를 활용한 **일정 관리 프로그램**이나, **간단한 검색 엔진**을 만들어보면 실전 경험을 쌓을 수 있습니다.

---

## 점검 체크리스트 (자기평가용)
- **배운 자료구조들에 대한 이해도**: 배열, 연결 리스트, 스택, 큐, 힙, 해시 테이블, 트리, 그래프의 개념과 구현 방법을 모두 이해했는지 확인.
- **알고리즘**: DFS, BFS, 다익스트라, 동적 계획법(DP)을 활용한 문제 해결 능력을 점검.
- **프로젝트 구현**: 자료구조를 실제 프로젝트에 어떻게 적용할 수 있는지, 주어진 문제를 해결하는 데 필요한 자료구조를 선택할 수 있는 능력을 점검.

---

## 유의사항:
1. **시간 관리**: 시간이 제한적이므로, 각 주제마다 주어진 시간 내에 **핵심적인 개념을 확실히 익히는** 것에 집중하세요. 너무 깊이 들어가기보다는 **기본적인 개념을 잘 이해하고 구현할 수 있는지**가 중요합니다.
2. **복습**: 하루 학습 후 복습하는 시간을 꼭 확보하세요. 복습을 통해 학습 내용을 **장기 기억**으로 정리하는 것이 중요합니다.
3. **실습 중심**: 이론을 배운 후에는 반드시 **실습을 통해 익히는 것이 중요**합니다. 실습을 통해 개념을 **실제 코드로 구현해보고** 문제를 해결하면서 **체득**할 수 있습니다.
4. **문제 해결 전략**: 학습한 자료구조와 알고리즘을 실제 문제에 어떻게 적용할지 생각하고, 문제 해결 전략을 세운 후 접근하는 연습을 해보세요.

---

이 계획을 따라가며, 집중적으로 자료구조와 알고리즘을 학습하면 2주 내에 **기본적인 이론과 실전 활용 능력**을 충분히 갖출 수 있습니다.
